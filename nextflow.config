manifest {
    author = 'Dan Fornika <dan.fornika@bccdc.ca>, Sherrie Wang <sherrie.wang@bccdc.ca>, Tara Newman'
    name = 'BCCDC-PHL/tbprofiler-nf'
    description = 'BCCDC-PHL TBProfiler Nextflow Wrapper'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.01.0'
    version = '0.2.5'
}

params {
    profile = false
    cache = ''
    illumina_suffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
    fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
    fastq_search_path = makeFastqSearchPath( illumina_suffixes, fastq_exts )
    fastq_input = 'NO_FILE'
    samplesheet_input = 'NO_FILE'
    platform= 'illumina'
    mapper= 'bwa'
    caller = 'bcftools'
    min_depth = 10
    min_af_used_for_calling = 0.1
    min_af_used_for_prediction = 0.1
    ref_name = 'NC_000962.3'
    rename_ref = false
    outdir = 'results'
    pipeline_short_name = parsePipelineName(manifest.toMap().get('name'))
    pipeline_minor_version = parseMinorVersion(manifest.toMap().get('version'))
    collect_outputs = false
    collected_outputs_prefix = 'collected'
    min_gene_coverage = 100.0
}

def makeFastqSearchPath ( illumina_suffixes, fastq_exts ) {
    def fastq_search_path = []
    for (suffix in illumina_suffixes){
        for (ext in fastq_exts) {
            fastq_search_path.add(params.fastq_input.toString() + '/' + suffix.toString() + ext.toString())
        }
    }
    return fastq_search_path
}

def parseMinorVersion(version) {
    minor_version = version.split('\\.')[0..1].join('.')
    return minor_version
}

def parsePipelineName(name) {
    short_name = name.split('/')[1]
    return short_name
}

profiles {
    conda {
	conda.enabled = true
	//conda.useMamba = true
	process.conda = "$baseDir/environments/environment.yml"
	if (params.cache){
	    conda.cacheDir = params.cache
	}

    }

    apptainer {
    	apptainer.enabled = true
	    process.container = "oras://ghcr.io/bccdc-phl/tbprofiler-nf:8c378f873be9f5ac"
	    if (params.cache) {
	        apptainer.cacheDir = params.cache
	    }
    }

}

process {
    withName: tbprofiler {
	cpus = 8
    }
}

trace {
    enabled = true
    overwrite = true
    file = "${params.outdir}/nextflow_trace.tsv"
}


process {
    withName: snpit {

    conda = "$baseDir/environments/snpit.yml"
	container = "oras://ghcr.io/bccdc-phl/tbprofiler-nf-snpit:927d241b2c0a2c8b"

    }
 
	withName: plot_coverage {

    conda = "$baseDir/environments/seaborn.yml"
	container = "oras://ghcr.io/bccdc-phl/tbprofiler-nf-seaborn:3617ebd9bb25d94d"

    }
}
